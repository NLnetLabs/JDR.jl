var documenterSearchIndex = {"docs":
[{"location":"api.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"The following methods are exposed when using JDR. ","category":"page"},{"location":"api.html#Processing-RPKI-files","page":"API","title":"Processing RPKI files","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"process_tas\nprocess_ta","category":"page"},{"location":"api.html#JDR.RPKI.process_tas","page":"API","title":"JDR.RPKI.process_tas","text":"process_tas([tal_urls::Dict]; kw...)\n\nProcess all trust anchors configured in JDR.toml. This is likely the most common way to start doing anything using JDR.jl:\n\nusing JDR;\n(tree, lookup) = process_tas()\n\nOptionally, a Dict of similar form can be passed directly to specify trust anchors not in the configuration file, or a subset of those that are specified.\n\nOptional keyword arguments:\n\nrepodir::String – defaults to CFG[\"rpki\"][\"rsyncrepo\"], i.e. the JDR.toml config file. \nstripTree::Bool – drop the ASN.1 tree from objects after validation, defaults to false\nnicenames::Bool – enrich the ASN.1 tree with human-readable fieldnames, defaults to true\n\nReturns Tuple{RPKINode,Lookup}\n\n\n\n\n\n","category":"function"},{"location":"api.html#JDR.RPKI.process_ta","page":"API","title":"JDR.RPKI.process_ta","text":"process_ta(ta_cer_fn::String; kw...)\n\nTakes a first cerficate to parse and processes all related descending files. Called by process_tas.\n\nOptional keyword arguments:\n\nrepodir::String – defaults to CFG[\"rpki\"][\"rsyncrepo\"], i.e. the JDR.toml config file.  Useful for processing data that is stored in a non-default directory structure, for  example when the TA certificate is stored in a different directory than the RPKI files.\nlookup – defaults to an empty Lookup()\nstripTree::Bool – drop the ASN.1 tree from objects after validation, defaults to false\nnicenames::Bool – enrich the ASN.1 tree with human-readable fieldnames, defaults to true\n\nReturns Tuple{RPKINode,Lookup}\n\n\n\n\n\n","category":"function"},{"location":"api.html#Search-based-on-RPKINode-tree-and-Lookup","page":"API","title":"Search based on RPKINode tree and Lookup","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"search\nnew_since","category":"page"},{"location":"api.html#JDR.RPKICommon.search","page":"API","title":"JDR.RPKICommon.search","text":"search(l::Lookup, asn::AutSysNum)\n\nSearch for RPKINode's related to a AutSysNum\n\n\n\n\n\nsearch(l::Lookup, filename::AbstractString)\n\nSearch for RPKINode's related to filename\n\n\n\n\n\nsearch(tree::RPKINode, ipr::IPRange{T}, include_more_specific::Bool=false)\n\nFind RPKINodes holding CERs or ROAs containing resources queried for. ROAs are matched if the ipr matches resources on the EE, or in the VRPs.\n\n\n\n\n\nsearch(tree::RPKINode, id::IssuerSubject)\n\nSearch certificates containing this issuer/subject ID\n\n\n\n\n\n","category":"function"},{"location":"api.html#JDR.RPKICommon.new_since","page":"API","title":"JDR.RPKICommon.new_since","text":"new_since(tree::RPKINode, tp::TimePeriod=Hour(1)) :: Vector{RPKINode}\n\nFind files published in the last tp, defaulting to one hour.\n\nFor CER objects, this is based on .notBefore. For MFT and CRL, this is based on .this_update.\n\n\n\n\n\n","category":"function"},{"location":"api.html#Helpers","page":"API","title":"Helpers","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"get_object\nget_pubpoint\nprint_ASN1\nprefixlen\nvrps","category":"page"},{"location":"api.html#JDR.RPKICommon.get_object","page":"API","title":"JDR.RPKICommon.get_object","text":"get_object(n::RPKINode)\nget_object(o::RPKIObject)\n\nReturns the wrapped object (CER, MFT, CRL, ROA) for an RPKINode or RPKIObject.\n\n\n\n\n\n","category":"function"},{"location":"api.html#JDR.RPKICommon.get_pubpoint","page":"API","title":"JDR.RPKICommon.get_pubpoint","text":"get_pubpoint(node::RPKINode) :: String\n\nGet the domain name of the publication point for the file represented by this RPKINode.\n\n\n\n\n\n","category":"function"},{"location":"api.html#JDR.RPKICommon.print_ASN1","page":"API","title":"JDR.RPKICommon.print_ASN1","text":"print_ASN1(n::RPKINode{T}; max_lines=0)\nprint_ASN1(o::RPKIObject{T}; max_lines=0)\n\nPrint the annotated ASN.1 tree structure for \n\n\n\n\n\n","category":"function"},{"location":"api.html#JDR.Common.prefixlen","page":"API","title":"JDR.Common.prefixlen","text":"prefixlen(r::IPRange{IPv6})\nprefixlen(r::IPRange{IPv4})\n\nReturns the prefix length of an IPRange.\n\n\n\n\n\n","category":"function"},{"location":"api.html#JDR.RPKICommon.vrps","page":"API","title":"JDR.RPKICommon.vrps","text":"vrps(r::ROA)\nvrps_v6(r::ROA)\nvrps_v4(r::ROA)\n\nGet the VRPs listed on a ROA in a Vector{VRP}\n\n\n\n\n\n","category":"function"},{"location":"api.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [JDR, JDR.Common, JDR.RPKI, JDR.RPKICommon]\nOrder   = [:constant, :function]","category":"page"},{"location":"index.html#JDR.jl","page":"Introduction","title":"JDR.jl","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"JDR.jl is a library to perform analysis on objects in the RPKI, enabling you to troubleshoot specific problems or do analyse the RPKI as a whole. It's driving JDR, but can be used in interactive Julia sessions (REPL or notebooks) to iteratively explore what is in the RPKI.","category":"page"},{"location":"index.html#Quick-start-guide","page":"Introduction","title":"Quick-start guide","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"JDR processes files published in the RPKI into a logical tree structure, allowing easy navigation between related files, collect specific values, et cetera. The Types page gives an overview of all the important structs used in this tree structure. Here, we will touch upon the essentials. For now we still rely on Routinator to fetch files  from the RPKI, though that will change in the future.","category":"page"},{"location":"index.html#Installing-the-JDR.jl-package","page":"Introduction","title":"Installing the JDR.jl package","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Assuming you have a working Julia environment, installing JDR.jl can be done as any other package from a git repository:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"]add https://github.com/NLnetLabs/JDR.jl","category":"page"},{"location":"index.html#Initial-configuration","page":"Introduction","title":"Initial configuration","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"First, we need a (current) copy of the RPKI repository on disk, with a directory structure equivalent to Routinator's rsync store, i.e. a subdirectory for every domain/repo observed within the RPKI:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"├── rsync\n│   ├── repo-rpki.idnic.net\n│   ├── repository.lacnic.net\n│   ├── rpki.afrinic.ne\n│   ├── rpki.apnic.net\n│   ├── rpki.arin.net\n│   ├── rpkica.twnic.tw\n│   ├── rpki.cnnic.cn\n│   ├── rpki.ripe.net\n│   ├── rsync.rpki.nlnetlabs.nl\n(...)\n","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Then in JDR.toml, uncomment rsyncrepo and point it to that directory. Furthermore, uncomment the TA certificates you want to include for analysis when using JDR. For a full view of the RPKI, uncomment all five. It's also possible to add new ones, i.e. testbeds.","category":"page"},{"location":"index.html#The-RPKINode-tree-structure","page":"Introduction","title":"The RPKINode tree structure","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Processing all the configured trust anchors via process_tas returns a tuple of RPKINode and Lookup. The RPKINode is the tree structure, with pointers its parent (again an RPKINode) and to zero or more children (also RPKINode's). All RPKINodes point to a  RPKIObject{T}, a parameterized wrapper for files observed within the RPKI: T can be a CER, MFT, CRL or a ROA.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The structure of the tree represents how files in the RPKI are related to each other. A certificate specifies a manifest, a manifest lists multiple files. In the RPKINode tree, we will see a RPKINode pointing to a RPKIObject{CER} with one single child: the RPKINode pointing to the RPKIObject{MFT} for that specified manifest. The latter RPKINode will have multiple RPKINodes in its .children, namely one RPKINode for each of the listed filenames.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"By keeping these pointers to parent and children, we can backtrack where the file came from (by looking at its ancestors) and what other files are 'introduced' by this file, by looking at its descendants. This can be useful when diagnosing a problem for which the cause might be higher up in the tree, or to see which subset of the tree is affected by a problem in a certain node/file.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Navigating between the nodes can be done directly via the parent and children fields. First, process all the configured trust anchors. In this example, we only configured two, namely the RIPE NCC TA and one for the NLnet Labs testbed:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"julia> using JDR\njulia> (tree, lookup) = JDR.process_tas();","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Now we can navigate through the resulting tree:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"julia> tree\nRPKINode [RootCER]\n\njulia> tree.children\n2-element Vector{JDR.RPKICommon.RPKINode}:\n RPKINode [CER] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/ta/ta.cer\n RPKINode [CER] /home/luuk/.rpki-cache/repository/rsync/rpki.ripe.net/ta/ripe-ncc-ta.cer\n\njulia> tree.children[1].children\n1-element Vector{JDR.RPKICommon.RPKINode}:\n RPKINode [MFT] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/ta/0/FC4B08CCEBA78DA0BA0ABB805D9B12EA49330A44.mft\n\njulia> tree.children[1].children[1].parent\n RPKINode [CER] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/ta/ta.cer\n\njulia> tree.children[1].children[1].parent === tree.children[1]\ntrue","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"RPKINodes can be iterated. The iterator yields the RPKINode itself and all of its siblings and children. ","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"# iterating over the entire tree:\njulia> collect(tree)\n67868-element Vector{Any}:\n RPKINode [RootCER]\n RPKINode [CER] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/ta/ta.cer\n RPKINode [CER] /home/luuk/.rpki-cache/repository/rsync/rpki.ripe.net/ta/ripe-ncc-ta.cer\n RPKINode [MFT] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/ta/0/FC4B08CCEBA78DA0BA0ABB805D9B12EA49330A44.mft\n RPKINode [MFT] /home/luuk/.rpki-cache/repository/rsync/rpki.ripe.net/repository/ripe-ncc-ta.mft\n RPKINode [CER] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/ta/0/1040FA57F99F4B3DE2626F6EE1C56664CB81D2C8.cer\n RPKINode [CRL] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/ta/0/FC4B08CCEBA78DA0BA0ABB805D9B12EA49330A44.crl\n (...)\n\n# or over a part of the tree:\njulia> collect(tree.children[1].children[1].children[1].children[1].children[1])\n3-element Vector{Any}:\n RPKINode [CER] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/testbed/0/9ECDC2034755D98A510A273FC89EFFC8AB73CF86.cer\n RPKINode [MFT] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/ca1604330821790/0/9ECDC2034755D98A510A273FC89EFFC8AB73CF86.mft\n RPKINode [CRL] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/ca1604330821790/0/9ECDC2034755D98A510A273FC89EFFC8AB73CF86.crl\n","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Combining this with Query.jl enables for some convenient filtering:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"julia> using Query;\njulia> tree |> @filter(_.obj.object isa ROA) |> collect\n23517-element Vector{Any}:\n RPKINode [ROA] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/minha_ca/0/31302e312e302e302f32342d3235203d3e203634353135.roa\n RPKINode [ROA] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/minha_ca/0/323030313a6462383a3a2f33322d3438203d3e203634353135.roa\n RPKINode [ROA] /home/luuk/.rpki-cache/repository/rsync/testbed.rpki.nlnetlabs.nl/repo/NIC/0/33302e33302e34302e302f32342d3234203d3e20333030.roa\n (...)\n\n# search for manifests with more than 200 files listed on them\njulia> tree |> @filter(_.obj.object isa MFT) |> @filter( length(_.obj.object.files) > 200) |> collect\n2-element Vector{Any}:\n RPKINode [MFT] /home/luuk/.rpki-cache/repository/rsync/rpki.ripe.net/repository/DEFAULT/KpSo3VVK5wEHIJnHC2QHVV3d5mk.mft\n RPKINode [MFT] /home/luuk/.rpki-cache/repository/rsync/rpki.ripe.net/repository/DEFAULT/58/18a91c-0e77-45c9-8cc4-062c6933abed/1/dJEiw1Q4pOsmIz_cbkux3y2q70I.mft\n","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Please refer to the Type reference for the details on the tree structure, as well as all the available fields in the RPKIObject types CER, MFT, CRL and ROA.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"index.html#fetching_files","page":"Introduction","title":"Fetching the files from the RPKI","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Using Routinator, fetch files using the following command to ensure a compatible directory structure as shown above. Files will be available (when using a vanilla Routinator config) in ~/.rpki-cache/repository/rsync:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"$ routinator --disable-rrdp update","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"compat: Compat\nThe above works for Routinator versions 0.7 and 0.8, but exact behavior might change in newer releases. We plan to implement fetching logic in JDR.jl itself soon, so it does not rely on external RP software such as Routinator anymore.","category":"page"},{"location":"index.html#Component-overview","page":"Introduction","title":"Component overview","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"JDR is comprised of several modules:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"ASN1: for decoding the RPKI files and creating ASN.1 structures\nPKIX: to validate and enrich the ASN.1 structures (X509 and CMS), highlighting errors and extracting information\nRPKI: holds the datastructures and types to represent the information extracted by the previous two modules, and exports methods to use and traverse all the data. This holds the most common types/functions for users of the library.\nBGP: additional info gathered from RIS whois dumps\nWebservice: offering a JSON-based webservice serving as the API for JDR","category":"page"},{"location":"types.html#Type-reference","page":"Types","title":"Type reference","text":"","category":"section"},{"location":"types.html#Tree-structure","page":"Types","title":"Tree structure","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Types constituting the tree as returned by process_tas and process_ta.","category":"page"},{"location":"types.html","page":"Types","title":"Types","text":"RPKINode\nRPKIObject\nRPKIFile","category":"page"},{"location":"types.html#JDR.RPKICommon.RPKINode","page":"Types","title":"JDR.RPKICommon.RPKINode","text":"RPKINode\n\nRepresents a file in the RPKI, with pointers to its parent, children and possible siblings.\n\nThe obj points to the RPKIObject{T} of this RPKINode, e.g. a RPKIObject{CER}.\n\nFields:\n\nparent::Union{Nothing, RPKINode}\nchildren::Vector{RPKINode}\nsiblings::Union{Nothing, Vector{RPKINode}}\nobj::Union{Nothing, RPKIObject}\nremark_counts_me::Union{Nothing, RemarkCounts_t}\nremark_counts_children::Union{Nothing, RemarkCounts_t}\n\n\n\n\n\n","category":"type"},{"location":"types.html#JDR.RPKICommon.RPKIObject","page":"Types","title":"JDR.RPKICommon.RPKIObject","text":"RPKIObject{T<:RPKIFile}\n\nContains an object T (i.e. a CER, MFT, CRL or ROA), decoded from filename into an annotated ASN1 tree in tree. Any warnings or errors for this object are stored in remarks.\n\nFields:\n\nfilename::String\ntree::Union{Nothing, Node} – ASN1.Node\nobject::T\nremarks::Union{Nothing, Vector{Remark}}\nremarks_tree::Union{Nothing, Vector{Remark}}\nsig_valid::Union{Nothing, Bool}\ncms_digest_valid::Union{Nothing, Bool}\n\n\n\n\n\n","category":"type"},{"location":"types.html#JDR.RPKICommon.RPKIFile","page":"Types","title":"JDR.RPKICommon.RPKIFile","text":"Abstract type to parameterize RPKIObject\n\njulia> subtypes(RPKIFile)\n5-element Vector{Any}:\n CER\n CRL\n MFT\n ROA\n RootCER\n\n\n\n\n\n","category":"type"},{"location":"types.html#Specific-RPKIObject-types","page":"Types","title":"Specific RPKIObject types","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"RootCER\nCER\nMFT\nCRL\nROA","category":"page"},{"location":"types.html#JDR.RPKICommon.RootCER","page":"Types","title":"JDR.RPKICommon.RootCER","text":"RootCER <: RPKIFile\n\nSynthetic, 'empty certificate' to act as the single entry point to the RPKINode graph, with all the RIR trust anchor certificates being its children.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JDR.RPKICommon.CER","page":"Types","title":"JDR.RPKICommon.CER","text":"CER <: RPKIFile\n\nRepresents a decoded certificate (.cer) file.\n\nFields:\n\nExtracted from decoded file:\n\nserial  – Serial number on this certificate\nnotBefore/notAfter – DateTime fields\npubpoint – String\nmanifest – String\nrrdp_notify – String\nselfsigned – Bool or Nothing\nissuer – String\nsubject – String\n\nSet after validation: \n\nvalidsig – Bool or Nothing\nresources_valid – Bool or Nothing\n\n\n\n\n\n","category":"type"},{"location":"types.html#JDR.RPKICommon.MFT","page":"Types","title":"JDR.RPKICommon.MFT","text":"MFT <: RPKIFile\n\nRepresents a decoded manifest (.mft) file.\n\nFields:\n\nExtracted from decoded file:\n\nfiles – Vector{String} containing filenames listed on this manifest\nloops – Vector{String} or Nothing listing the filenames causing a loop\nmissing_files – Vector{String} of filenames listed in the manifest but not found on disk\nthis_update: DateTime\nnext_update: DateTime\n\n\n\n\n\n","category":"type"},{"location":"types.html#JDR.RPKICommon.CRL","page":"Types","title":"JDR.RPKICommon.CRL","text":"CRL <: RPKIFile\n\nRepresents a decoded Certificate Revocation List (.crl) file.\n\nFields:\n\nrevoked_serials – Vector of SerialNumber's\nthis_update – DateTime\nnext_update – DateTime\n\n\n\n\n\n","category":"type"},{"location":"types.html#JDR.RPKICommon.ROA","page":"Types","title":"JDR.RPKICommon.ROA","text":"ROA <: RPKIFile\n\nRepresents a decoded Route Origin Authorization (.roa) file.\n\nFields:\n\nasid – Integer\nvrp_tree – VRPS\nresources_v6 – IntervalTree{IPv6} of the IPv6 resources in the EE certificate\nresources_v4 – IntervalTree{IPv4} of the IPv4 resources in the EE certificate\n\nAfter validation:\n\nresources_valid – Bool or Nothing\n\n\n\n\n\n","category":"type"},{"location":"types.html#The-Lookup-struct","page":"Types","title":"The Lookup struct","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Lookup","category":"page"},{"location":"types.html#JDR.RPKICommon.Lookup","page":"Types","title":"JDR.RPKICommon.Lookup","text":"Lookup\n\nProvides mappings/shortcuts to RPKINodes of particular interest.\n\nFields:\n\nASNs::Dict{AutSysNum}{Vector{RPKINode}}\nfilenames::Dict{String}{RPKINode}\nmissing_files::Dict{String}{RPKINode}\nresources_v6::IntervalTree{IPv6,IntervalValue{IPv6,RPKINode}}\nresources_v4::IntervalTree{IPv4,IntervalValue{IPv4,RPKINode}}\npubpoints::Dict{String}{Pair{Int,Set{RPKINode}}}\ntoo_specific::Vector{RPKINode}\ninvalid_signatures::Vector{RPKIObject{T} where T}\ninvalid_certs::Vector{RPKINode}\nvalid_certs::Vector{RPKINode}\n\n\n\n\n\n","category":"type"},{"location":"types.html#Common-types","page":"Types","title":"Common types","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"AutSysNum\nIPRange\nJDR.RPKICommon.VRPS\nJDR.RPKICommon.SerialNumber","category":"page"},{"location":"types.html#JDR.Common.AutSysNum","page":"Types","title":"JDR.Common.AutSysNum","text":"Wrapper for asn::UInt32. Can be constructed directly via any Integer, or be parsed from a String: \n\nAutSysNum(s::AbstractString)\n\n\n\n\n\n","category":"type"},{"location":"types.html#JDR.Common.IPRange","page":"Types","title":"JDR.Common.IPRange","text":"IPRange{T<:IPAddr}\n\nDescribes an IP prefix or range by only storing the first and last Sockets.IPAddr.\n\n\n\n\n\n","category":"type"},{"location":"types.html#JDR.RPKICommon.VRPS","page":"Types","title":"JDR.RPKICommon.VRPS","text":"Holds the IPv6 and IPv4 resources listed on this ROA, as an IntervalTree, with Values denoting the maxlength.\n\nFields:\n\nresources_v6::_VRPS{IPv6}\nresources_v4::_VRPS{IPv4}\n\nThese field are named this way so we can easily to coverage checks between different RPKIObject types.  _VRPS is an alias for IntervalMap{T, UInt8}. \n\n\n\n\n\n","category":"type"},{"location":"types.html#JDR.RPKICommon.SerialNumber","page":"Types","title":"JDR.RPKICommon.SerialNumber","text":"Simple wrapper for serial::Integer \n\n\n\n\n\n","category":"type"},{"location":"types.html#Index","page":"Types","title":"Index","text":"","category":"section"},{"location":"types.html","page":"Types","title":"Types","text":"Modules = [JDR, JDR.Common, JDR.RPKI, JDR.RPKICommon]\nOrder   = [:type]","category":"page"}]
}
